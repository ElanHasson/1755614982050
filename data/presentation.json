{
  "metadata": {
    "title": "Die Auswirkung von Schlafmangel auf die Leistungsfähigkeit in der Software Entwicklung",
    "description": "Lange Nächte am Rechner sind in der Softwareentwicklung keine Seltenheit – doch Schlafmangel hat direkte Folgen auf Konzentration, Kreativität und Code-Qualität. In diesem Talk zeige ich, wie fehlender Schlaf die Leistungsfähigkeit von Entwickler:innen beeinträchtigt und warum er ein entscheidender Faktor für nachhaltige Produktivität und Team-Erfolg ist.",
    "author": "Webinar Maker Pro",
    "domain": "healthcare",
    "duration": 10,
    "created": "2025-08-19T14:40:35.673Z",
    "version": "1.0.0",
    "language": "en-US",
    "theme": {
      "primaryColor": "#0891b2",
      "secondaryColor": "#0e7490",
      "fontFamily": "Source Sans Pro, sans-serif",
      "codeTheme": "github"
    }
  },
  "slides": [
    {
      "id": "s1",
      "content": {
        "type": "title",
        "title": "Warum Schlaf über Code-Qualität entscheidet: ein kurzer Realitätscheck",
        "subtitle": "An AI-Generated Presentation",
        "presenter": "Webinar Maker Pro",
        "date": "2025-08-19"
      },
      "speakerNotes": "- 0:00–0:10 Hook: \"Wer hat letzte Woche nach 23:00 noch gemergt?\" Kurze Handzeichen/Chat-Abfrage. Pause 2s\n- 0:10–0:35 Fakten setzen: 7–9 h Bedarf; 14 Tage à 6 h ≈ eine durchwachte Nacht; 17 h wach ≈ 0,05% BAC. Betone: Betroffene unterschätzen Defizite. Spend 25s\n- 0:35–0:55 Wechsel zur Codefolie. Hinweis: \"Off-by-One\" zeigen. Zeige zuerst die fehlerhafte Zeile (<=), dann die Korrektur (<). Spend 20s\n- 0:55–1:15 Diagramm einblenden. Erkläre Fluss: weniger Schlaf -> kognitive Einbußen -> Fehler -> Rework/Incidents -> Teamstress/Gesundheit/Qualität. Spend 20s\n- 1:15–1:30 Brücke zum Talk: Wir liefern Evidenz + praktikable, schlaffreundliche Arbeitsweisen auf individueller/Team/Org-Ebene. Betonung: Healthcare-Perspektive, kein individueller medizinischer Rat. Invite: \"Bleiben Sie dran.\" Spend 15s\n- Interaktion: Ermutige Chat-Kommentar: \"Wann seid ihr kognitiv am stärksten?\" (früh/spät)\n- Technisch: Vor dem Start Code-Slide aktiv; dann zum Mermaid-Diagramm klicken; Timer im Blick behalten",
      "narration": "Guten Tag zusammen... Bevor Sie heute um 23 Uhr noch schnell mergen, halten Sie kurz inne... In der Softwareentwicklung ist Schlafmangel normalisiert, aber er trifft genau die Funktionen, die wir für sauberen Code brauchen: Aufmerksamkeit, Arbeitsgedächtnis, Kreativität und Emotionskontrolle... Erwachsene benötigen im Schnitt sieben bis neun Stunden Schlaf... Dauerhaft darunter steigen Leistungs- und Gesundheitsrisiken... Zwei Wochen mit sechs Stunden pro Nacht erzeugen Einbußen ähnlich wie eine komplett durchwachte Nacht... Und schon siebzehn Stunden am Stück wach entspricht in etwa 0,05 Prozent Blutalkohol – das merkt man oft zu spät... Was bedeutet das im Code?... Mehr Off-by-One-Fehler, fehlende Null-Checks und riskantere Entscheidungen, besonders bei späten Commits und Deploys... Sehen Sie hier: In der müden Version läuft die Schleife bis kleiner-gleich und summiert einmal zu viel – das endet in NaN... Mit klarem Kopf ist die Bedingung einfach kleiner als die Länge... Der Weg ist leider geradlinig: Weniger Schlaf führt zu kognitiven Einbußen, daraus folgen mehr Fehler, Rework und Incidents, dann Teamstress und am Ende Gesundheits- und Qualitätsrisiken... Schlaf ist damit ein Gesundheits- und Qualitätsthema – und gehört in unsere Engineering-Praxis... In diesem Talk zeige ich die Evidenz dahinter und vor allem schlaffreundliche Arbeitsweisen auf individueller, Team- und Organisationsebene, die Code-Qualität und nachhaltige Produktivität schützen.",
      "duration": 1.5,
      "transition": "fade",
      "componentPath": "./components/slides/Slide_s1.tsx",
      "audioPath": "/audio/slide-s1.mp3"
    },
    {
      "id": "s2",
      "content": {
        "type": "markdown",
        "title": "Schlaf 101 für Entwickler:innen: Bedarf, Architektur, REM vs. Tiefschlaf",
        "markdown": "- **Schlafbedarf**: Erwachsene brauchen 7–9 h/Nacht (AASM); <7 h erhöht Leistungs- und Gesundheitsrisiken; 14 Tage mit 6 h ≈ eine durchwachte Nacht; 17 h wach ≈ 0,05% BAC\n- **Schlafarchitektur**: NREM (N1/N2/**N3**=Tiefschlaf) festigt Wissen & Synapsen; **REM** verknüpft weit, fördert Kreativität & emotionale Integration – beides direkt relevant fürs Coden\n- **Auswirkung auf Dev-Leistung**: Weniger Vigilanz → mehr Null-Checks/Off-by-One-Fehler; schwächeres Arbeitsgedächtnis → Kontextverluste; weniger REM → weniger „Aha“-Momente beim Debugging\n- **Rhythmus & Timing**: Chronotypen („Eule“/„Lerche“) beachten; anspruchsvolle Aufgaben zu Hochphasen; späte Commits/Deploys meiden – nachts steigt Bug-Wahrscheinlichkeit\n- **Powernap**: 10–20 min (vor 15 Uhr) steigern Wachheit ohne starke Schlafinertia; länger = Risiko für Benommenheit\n\n```mermaid\nflowchart TD\n  Sleep[Schlaf] --> NREM[NREM]\n  NREM --> N3[\"N3 (Tiefschlaf)\"]\n  N3 --> Learn[\"Deklaratives Lernen/Konsolidierung\"]\n  Learn --> DevMem[\"Code-Verständnis/Architektur im Kopf\"]\n  Sleep --> REM[REM]\n  REM --> Assoc[\"Assoziatives Denken/Kreativität\"]\n  Assoc --> DevInsight[\"Debugging-Insights/Design-Ideen\"]\n  Lack[\"Schlafmangel\"] --> Effects[\"Vigilanz↓ • Fehler↑ • Stimmungsschwankungen\"]\n  Effects --> Outcomes[\"PR-Rework/Bug-Rate↑\"]\n```\n\n```sh\n# .git/hooks/pre-commit (Beispiel): Warnen vor späten Commits\n#!/bin/sh\nhour=$(date +%H)\nif [ \"$hour\" -ge 19 ] || [ \"$hour\" -lt 7 ]; then\n  echo \"Hinweis: Späte Commits sind im Schnitt fehleranfälliger. Review am Morgen?\"\n  printf \"Trotzdem committen? [y/N] \"\n  read ans\n  case \"$ans\" in\n    [yY]*) exit 0 ;;\n    *) echo \"Commit abgebrochen. Schlaf zuerst.\"; exit 1 ;;\n  esac\nfi\nexit 0\n```"
      },
      "speakerNotes": "- 0:00–0:10: Kurz einordnen: Warum Schlafbasis? Verbindung zu Produktivität/Code-Qualität herstellen\n- 0:10–0:30: Punkt 1 hervorheben: 7–9 h; <7 h Risiken; 14 Tage à 6 h ≈ eine durchwachte Nacht; 17 h wach ≈ 0,05% BAC. Pause für Wirkung\n- 0:30–1:00: Zur Schlafarchitektur überleiten. Diagramm zeigen. N3=Tiefschlaf → Wissenskonsolidierung; REM → kreative Assoziationen/emotionale Integration. Bezug zu Onboarding, Refactoring, Debugging\n- 1:00–1:15: Chronotypen & Timing: Deep-Work zu Hochphasen, späte Commits vermeiden; auf Studien zu Fehlern bei Nacht verweisen\n- 1:15–1:25: Powernap-Regel: 10–20 min, vor 15 Uhr; Schlafinertia bei längeren Naps erwähnen\n- 1:25–1:30: Pre-Commit-Hook kurz anreißen als praktisches Geländer. Nächste Sektion anteasern\n- Interaktion: Kurze Handzeichen-Frage: „Wer kennt den Unterschied zwischen REM und Tiefschlaf?“ (max. 5 s)\n- Technisch: Cursor auf Mermaid-Diagramm bewegen, Knoten REM/N3 nacheinander highlighten; Code-Snippet nur kurz einblenden, nicht vorlesen",
      "narration": "Kurzer Crashkurs Schlaf 101 – warum das für Code-Qualität zählt... Erwachsene brauchen in der Regel sieben bis neun Stunden Schlaf pro Nacht... Unter sieben Stunden steigen Leistungs- und Gesundheitsrisiken deutlich... Vierzehn Tage mit nur sechs Stunden erzeugen Defizite ähnlich einer durchwachten Nacht, und schon siebzehn Stunden am Stück wach sind in ihrer Wirkung in etwa wie 0,05 Promille.\nSchauen wir auf die Architektur: Im Tiefschlaf, also N3 im NREM, werden neues Wissen und Synapsen stabilisiert – das hält Systemwissen, APIs und Architektur im Kopf... Im REM-Schlaf werden weite Assoziationen gebildet, was kreative Verknüpfungen und emotionale Integration fördert – genau die Aha-Momente beim Debugging und beim Design... Im Diagramm seht ihr: Tiefschlaf führt zu besserem Code-Verständnis, REM zu Debugging-Insights... Fehlt Schlaf, fallen Vigilanz und Stimmung, Fehler und Rework steigen.\nFür den Arbeitsalltag heißt das: Plant anspruchsvolle Aufgaben zu euren circadianen Hochphasen und meidet späte Commits und Deployments, weil nachts die Bug-Wahrscheinlichkeit steigt... Wenn es doch spät wird, helfen Geländer... Unser kurzes Pre-Commit-Hook-Beispiel blendet nachts eine Warnung ein und verschiebt Entscheidungen notfalls auf den Morgen.\nUnd noch ein pragmatischer Hebel: Powernaps von zehn bis zwanzig Minuten, idealerweise vor fünfzehn Uhr, erhöhen die Wachheit ohne starke Schlafträgheit... Merkt euch: Sieben bis neun Stunden sind die Basis, Tiefschlaf speichert Wissen, REM bringt Ideen – und beides ist entscheidend für stabile Produktivität und sauberen Code.",
      "duration": 1.5,
      "transition": "fade",
      "componentPath": "./components/slides/Slide_s2.tsx",
      "audioPath": "/audio/slide-s2.mp3"
    },
    {
      "id": "s3",
      "content": {
        "type": "markdown",
        "title": "Was fehlt, wenn Schlaf fehlt: Aufmerksamkeit, Gedächtnis, Kreativität und Emotion unter Druck",
        "markdown": "**Was Schlafmangel direkt kostet**\n- Aufmerksamkeit/Vigilanz: mehr Lapses und Microsleeps; im Code: übersehene Null-Checks, Off-by-one-Fehler\n- Arbeitsgedächtnis/Exekutive: weniger Kontext im Kopf; mehr Re-Reads, längere PR-Durchlaufzeiten, mehr Rework\n- Kreativität/Insight: weniger neue Lösungswege; REM-Schlaf fehlt für Mustererkennung und „Aha“-Momente\n- Emotion/Risiko: mehr Reizbarkeit, verzerrte Risikobewertung; härtere Reviews, schnellere Eskalationen\n- Harte Fakten: 14 Tage à 6h → Leistungsdefizite ~ durchwachte Nacht; 17h wach ≈ 0,05% „BAC“-Äquivalent; späte Commits sind fehleranfälliger\n\n```python\n# Beispiel: Null-Check übersehen bei Müdigkeit\n# 02:13 Uhr-Commit – Crash in Produktion\n\ndef apply_discount(user):\n    # BUG: kein Guard für user == None\n    if user.is_premium and user.cart.total > 100:\n        return user.cart.total * 0.9\n    return user.cart.total  # AttributeError, wenn user None ist\n```\n\n```mermaid\nflowchart TD\nSL[\"Schlafmangel\"] --> A[\"Aufmerksamkeit ↓ (Microsleeps, Lapses)\"]\nA --> WM[\"Arbeitsgedächtnis ↓ (Kontextverlust)\"]\nWM --> K[\"Kreativität/Insight ↓\"]\nK --> E[\"Emotionsregulation ↓ (Reizbarkeit, Risiko)\"]\nE --> O[\"Outcomes: Bugrate ↑, Codequalität ↓, Teamkonflikte ↑\"]\n```"
      },
      "speakerNotes": "- 0:00–0:05: Kurz Titel einblenden, Publikum ansehen\n- 0:05–0:15: Frame setzen: „Wenn Schlaf fehlt, fehlen Kernfunktionen für sauberen Code.“\n- 0:15–0:35: Punkt 1 (Aufmerksamkeit). Betone Microsleeps, Zahlen: 14 Tage à 6h ~ durchwachte Nacht; 17h ~ 0,05% BAC. Pause 2s\n- 0:35–0:55: Punkt 2 (Arbeitsgedächtnis). Beispiel: längere PRs, mehr Re-Reads. Zeige auf Bullet\n- 0:55–1:10: Punkt 3 (Kreativität). Nenne REM und „Aha“-Momente. Blickkontakt halten\n- 1:10–1:25: Punkt 4 (Emotion/Risiko). Verknüpfe mit Reviews/Incidents; erwähne mehr Bugs bei späten Commits\n- 1:25–1:35: Technischer Einschub: Zum Code-Beispiel wechseln; „BUG: kein Guard“ highlighten\n- 1:35–1:45: Mermaid-Diagramm zeigen: von Schlafmangel zu Outcomes. Mit Laser die Kaskade entlangfahren\n- 1:45–1:55: Mini-Interaktion: „Wer kennt den 2-Uhr-Bug?“ Handzeichen erbitten, lächeln\n- 1:55–2:00: Übergang: „Gleich: Wie schützen wir Schlaf in Engineering-Prozessen?“ Nächste Folie vorbereiten",
      "narration": "Wenn Schlaf fehlt, fehlen genau die Funktionen, die sauberen Code möglich machen... Schauen wir auf vier Bereiche, die in der Softwareentwicklung zentral sind... Erstens die Aufmerksamkeit... Schon nach einer Nacht sinkt die Vigilanz, und Microsleeps schleichen sich ein... Nach vierzehn Tagen mit nur sechs Stunden Schlaf summieren sich die Leistungsdefizite auf ein Niveau ähnlich wie nach einer durchwachten Nacht... Und nach siebzehn Stunden Wachsein entsprechen die Einbußen ungefähr 0,05 Promille Alkohol... Im Code-Beispiel sehen Sie, wie ein übersehener Null-Check nachts um zwei direkt zum Crash führt... Zweitens das Arbeitsgedächtnis... Unter Schlafmangel halten wir weniger Kontext im Kopf, verlieren den roten Faden über mehrere Dateien und Abhängigkeiten... Das bedeutet mehr Re-Reads, längere Durchlaufzeiten von Pull Requests und mehr Rework... Drittens Kreativität und Problemlösen... REM-Schlaf fördert weite Assoziationen und Aha-Momente... Fehlt dieser Anteil, finden wir seltener neue Lösungswege und greifen häufiger zu kurzfristigen, anfälligen Fixes... Viertens Emotion und Risiko... Schlafmangel erhöht die Reizbarkeit und verschiebt die Risikobewertung... In Code-Reviews reagieren wir härter, in Incidents eskalieren Entscheidungen schneller... Daten aus Open-Source-Repositories zeigen zudem: Späte Commits sind im Schnitt fehleranfälliger... In der Grafik sehen Sie die Kaskade: Schlafmangel drückt Aufmerksamkeit, Arbeitsgedächtnis, Kreativität und Emotionsregulation – und am Ende steigen Bugrate und Konflikte, während die Codequalität sinkt... Die Quintessenz: Schlaf ist kein Nice-to-have, sondern ein Performance-Feature... Wer nachhaltig liefern will, schützt Schlaffenster, plant anspruchsvolle Arbeit in die eigenen Hochphasen und verschiebt riskante Changes auf den Morgen... Im nächsten Abschnitt schauen wir uns an, wie Teams das konkret in ihren Prozessen verankern können.",
      "duration": 2,
      "transition": "fade",
      "componentPath": "./components/slides/Slide_s3.tsx",
      "audioPath": "/audio/slide-s3.mp3"
    },
    {
      "id": "s4",
      "content": {
        "type": "markdown",
        "title": "Innere Uhr vs. Arbeitsalltag: Chronotypen, sozialer Jetlag und Spätschichten",
        "markdown": "- **Chronotyp ≠ Faulheit**: Innere Uhr steuert kognitive Hochphasen (\"Eule\" vs. \"Lerche\"); falsches Timing kostet Fokus und Code-Qualität\n- **Sozialer Jetlag**: Tägliche Diskrepanz zwischen innerer und sozialer Zeit (≈1–2 h); mehr Schläfrigkeit, höhere Fehler- und Bugrate\n- **Spätschichten/On-Call**: Verschobener REM, Schlafinertia; nächtliche Commits/Deploys sind im Schnitt fehleranfälliger\n- **Praxis für Teams**: Deep-Work nach Chronotyp, rotierende Zeitzonen-Meetings, „No late merges“, Post-Call-Ruhe, helles Tageslicht/gedimmte Abende\n```js\n// Chronotyp-gerechte Planung (vereinfachtes Beispiel)\nconst PLAN = {\n  Lerche: { deepWork: ['09:00-11:00'], meetings: ['13:00-15:00'] },\n  Eule: { deepWork: ['11:00-13:00','15:00-18:00'], meetings: ['10:00-11:00'] }\n};\nfunction planDay(chronotype='Lerche') {\n  const p = PLAN[chronotype] ?? PLAN.Lerche;\n  return { ...p, deployCutoff: '18:00' };\n}\nfunction shouldMerge(date=new Date()) {\n  return date.getHours() < 18; // \"No late merges\" reduziert Fehlerdruck bei Müdigkeit\n}\n```\n```mermaid\nflowchart TD\nC[\"Chronotyp ('Eule'/'Lerche')\"] --> A[\"Arbeitszeiten (fixe Kernzeiten)\"]\nS[\"Spätschichten/On-Call\"] --> A\nA --> M[\"Misalignment: Sozialer Jetlag\"]\nM --> O1[\"Vigilanz ↓, Microsleeps ↑\"]\nM --> O2[\"Arbeitsgedächtnis ↓, Kreativität ↓\"]\nM --> O3[\"Bugs/Build‑Fails ↑, Teamspannung ↑\"]\n```"
      },
      "speakerNotes": "- 0:00–0:08 Set the frame: innere Uhr trifft starre Arbeitsrhythmen; warum das für Code-Qualität zählt\n- 0:08–0:16 Bullet 1 kurz erklären; Publikum fragen: \"Wer ist eher Eule, wer Lerche?\" (Handzeichen)\n- 0:16–0:24 Bullet 2: sozialer Jetlag als täglicher Mini-Jetlag; betonen: Leistung sinkt, ohne dass es auffällt\n- 0:24–0:36 Bullet 3: Spätschichten/On-Call; anführen, dass nächtliche Commits/Deploys messbar fehleranfälliger sind\n- 0:36–0:46 Bullet 4: schnelle Hebel für Teams; zwei Beispiele nennen (No late merges, Post-Call-Ruhe)\n- 0:46–0:54 Diagramm zeigen; Pfad Chronotyp/Spätschichten → Misalignment → Outcomes hervorheben\n- 0:54–1:00 Kurz zum Code-Snippet wechseln; betonen: Deep-Work-Fenster + Deploy-Cutoff; Übergang zur nächsten Sektion\n- Technische Hinweise: Diagramm eingeblendet lassen beim Erklären; dann zum Code-Block scrollen; Blickkontakt halten; keine Fragerunde hier, Hinweis auf Q&A später",
      "narration": "Unsere innere Uhr ist nicht gleich getaktet: Manche sind Lerchen, andere Eulen... Diese Chronotypen bestimmen, wann unser Gehirn Höchstleistung bringt... Wenn starre Kernzeiten dagegenlaufen, entsteht sozialer Jetlag – ein täglicher Mini‑Zeitsprung, der Schläfrigkeit erhöht und Fehler begünstigt... Besonders heikel sind Spätschichten und On‑Call: verschobener REM‑Schlaf, Schlafinertia am Morgen, und nächtliche Commits und Deploys sind im Schnitt fehleranfälliger... Was heißt das für die Praxis?... Legen Sie Deep‑Work in die eigenen Hochphasen, rotieren Sie Zeitzonen‑Meetings, setzen Sie eine No‑late‑merges‑Regel und ermöglichen Sie Post‑Call‑Ruhe... Tagsüber viel helles Licht, abends warm und gedimmt... Im Flowchart sehen Sie den Weg: Chronotyp und späte Arbeit treffen auf fixe Zeiten, führen zu Misalignment und dann zu weniger Vigilanz, schwächerem Arbeitsgedächtnis und mehr Bugs... Und so sieht eine einfache Umsetzung aus: Die planDay‑Funktion vergibt Deep‑Work‑Fenster je nach Chronotyp und setzt einen Deploy‑Cutoff um 18 Uhr, während shouldMerge späte Merges blockt... Kleine Strukturänderungen, große Wirkung auf Konzentration, Kreativität und Code‑Qualität.",
      "duration": 1,
      "transition": "fade",
      "componentPath": "./components/slides/Slide_s4.tsx",
      "audioPath": "/audio/slide-s4.mp3"
    },
    {
      "id": "s5",
      "content": {
        "type": "markdown",
        "title": "Praxisfälle aus dem Dev-Alltag: Nacht‑Commit, On‑Call‑Fix, globale Meetings",
        "markdown": "- Nacht-Commit, On-Call-Fix, globale Meetings: drei typische Müdigkeits-Fallen im Dev-Alltag\n- Wirkung von Schlafmangel: Vigilanz↓, Arbeitsgedächtnis↓, Fehler↑ – direkte Folgen für Code-Qualität & Patientensicherheit\n- Demo: Bug aus Nacht-Commit, 03:00-Fatigue-Gate im On-Call, Meeting-Rotation als Schlafschutz\n- Maßnahmen: No‑late‑merge, Two‑person rule nachts, Feature-Flags & Rollback, Follow‑the‑Sun/Rotation\n- Healthcare-Kontext: Alarme/Workflows dürfen nicht an Müdigkeitsfehlern scheitern\n```javascript\n// Nacht-Commit (01:13): Müdigkeitsfehler – Zuweisung statt Vergleich, Alarm wird nie gesendet\nfunction isCritical(bp) {\n  return bp.systolic > 180 || bp.diastolic > 120;\n}\nfunction triage(patient, bp) {\n  if (patient = null) { // BUG: setzt patient auf null, Bedingung ist false → keine Alarmierung\n    if (isCritical(bp)) {\n      notifyCareTeam(patient.id, \"CRITICAL BP\");\n    }\n  }\n}\n\n// Fix am Morgen: klarer Null-Check und frühes Fail-Fast, dann Alarm-Logik\nfunction triageFixed(patient, bp) {\n  if (!patient) throw new Error(\"Patient missing\");\n  if (isCritical(bp)) {\n    notifyCareTeam(patient.id, \"CRITICAL BP\");\n  }\n}\n```\n```bash\n#!/usr/bin/env bash\n# On-Call 03:00: kleines Fatigue-Gate (Karolinska Skala)\nKSS=${KSS:-8}\nif [ \"$KSS\" -ge 7 ]; then\n  echo \"Fatigue risk hoch: Buddy-Review + Feature-Flag erforderlich\"; exit 1\nfi\necho \"OK für Hotfix (KSS=$KSS)\"\n```\n```mermaid\nflowchart TD\nA[\"Fixe 22-Uhr-Meetings über Zeitzonen\"] --> B[\"Chronischer Schlafmangel in Region A\"]\nB --> C[\"Aufmerksamkeit sinkt, Fehler steigen\"]\nD[\"Rotation + asynchrone Updates\"] --> E[\"Schlaffenster geschützt\"]\nE --> F[\"Qualität stabil, Stimmung besser\"]\n```"
      },
      "speakerNotes": "- 0:00–0:10 Warm-up: Praxisbezug betonen. „Wir schauen auf drei Momente, in denen Müdigkeit Qualität kostet.“\n- 0:10–0:15 Point auf Folie 1 highlighten: Vigilanz/Fehler. Kurz Kontext Healthcare nennen.\n- 0:15–0:55 Show demo (Night-Commit)\n  - Switch to code editor\n  - Zoom auf Zeile `if (patient = null)`\n  - Erklären: Zuweisung statt Vergleich → Alarm wird nie gesendet; Risiko im Gesundheitskontext\n  - Dann auf `triageFixed` wechseln: Fail-Fast, klare Checks, gleiche Logik mit frischer Wachheit\n- 0:55–1:10 Show demo (On-Call-Fix)\n  - Switch to terminal\n  - Skript zeigen: bei KSS ≥ 7 blockieren, Buddy + Feature-Flag verlangen\n  - Hinweis: reduziert Fehlerrisiko, verlagert finale Entscheidung in den Morgen\n- 1:10–1:25 Diagramm (globale Meetings)\n  - Öffne Mermaid-Diagramm\n  - Zeigen: fixe 22-Uhr-Meetings → Schlafmangel → Fehler; Alternative: Rotation + async → Qualität stabil\n- 1:25–1:30 Wrap-up\n  - Takeaways: No-late-merge, Two-person rule nachts, Follow-the-Sun/Rotation\n  - Check for questions später in Q&A",
      "narration": "Schauen wir uns drei Situationen an, in denen Müdigkeit unsere Arbeit direkt trifft: Nacht-Commit, On-Call-Fix und globale Meetings... Auf der Folie sehen Sie die Kernauswirkung: Weniger Wachheit und Arbeitsgedächtnis bedeuten mehr Fehler – mit Folgen für Code-Qualität und, im Gesundheitsbereich, für sichere Workflows.\nErster Fall: der Nacht-Commit... Im Beispiel sehen Sie in der Funktion triage die Zeile if, patient gleich null... Das ist eine Zuweisung statt eines Vergleichs... Die Bedingung wird dadurch immer falsch, und die Alarmierung wird nie ausgelöst, selbst wenn der Blutdruck kritisch ist... In der korrigierten Version triageFixed prüfen wir zuerst sauber, ob der Patient fehlt, brechen dann ab und alarmieren nur, wenn isCritical tatsächlich zutrifft... Genau solche Vigilanzfehler steigen unter Schlafmangel signifikant an.\nZweiter Fall: On-Call um drei Uhr morgens... Statt reflexartig zu deployen, setzt dieses kleine Bash‑Fatigue‑Gate eine Schranke: Ab einem Karolinska‑Wert von sieben blockiert es und verlangt Buddy‑Review und Feature‑Flag... So verschieben wir riskante Entscheidungen in die Morgenstunden, wenn die kognitive Leistung wieder oben ist.\nDritter Fall: globale Meetings... Das Diagramm zeigt, wie fixe Zweiundzwanzig‑Uhr‑Slots in einer Region chronischen Schlafmangel erzeugen, Aufmerksamkeit sinkt, Fehler steigen... Die Alternative ist Rotation plus asynchrone Updates – Schlaffenster bleiben geschützt, Qualität und Teamklima stabilisieren sich.\nDie Takeaways: No‑late‑merge, Two‑person rule nachts und Meeting‑Rotation... Schlaf ist ein Qualitäts‑ und Sicherheitsfaktor – besonders in der Gesundheitsdomäne.",
      "duration": 1.5,
      "transition": "fade",
      "componentPath": "./components/slides/Slide_s5.tsx",
      "audioPath": "/audio/slide-s5.mp3"
    },
    {
      "id": "s6",
      "content": {
        "type": "markdown",
        "title": "Mini‑Selbsttest: Fatigue‑Risiken im eigenen Team erkennen",
        "markdown": "- **30-Sekunden-Selbsttest (letzte Woche, Ja/Nein)**\n  - Unter 7 h Schlaf an ≥3 Nächten?\n  - Späte Commits/On-Call nach 22 Uhr?\n  - Fixe Meetings, die in einer Zeitzone nach 21 Uhr liegen?\n  - Koffein nach 16 Uhr an ≥3 Tagen?\n  - Gereiztheit/mehr Rework nach späten Merges?\n- **Score:** Zähle deine Ja-Antworten (0–5)\n- **Wenn Score ≥2: wähle 1 Sofortmaßnahme**\n  - No‑Late‑Merge‑Cutoff (z. B. 18–19 Uhr)\n  - Rotierende Meetingzeiten/mehr Async\n  - Post‑Call‑Rest + Buddy bei Nacht‑Changes\n- **Teilen:** Zahl 0–5 jetzt in den Chat oder per Handzeichen\n- Hinweis: Persistente Tagesschläfrigkeit medizinisch abklären\n```mermaid\nflowchart LR\nA[\"Fragen beantworten\"] -->|\"Score 0–1\"| B[\"Beobachten & Retro mit Fatigue-Lens\"]\nA -->|\"Score 2–3\"| C[\"Sofortmaßnahme wählen\"]\nA -->|\"Score >=4\"| D[\"FRM-Check, Cutoffs & Escalation\"]\n```"
      },
      "speakerNotes": "- 0:00–0:03 Set up: „Wir machen jetzt einen 30‑Sekunden‑Selbsttest.“\n- 0:03–0:15 Lesen Sie die 5 Fragen zügig vor. Bitte um stilles Ja/Nein.\n- 0:15–0:20 „Zählt eure Ja‑Antworten.“ Kurz pausieren.\n- 0:20–0:27 „Bei ≥2: Wählt sofort eine Maßnahme aus der Liste.“ Kurz pausieren.\n- 0:27–0:30 „Teilt eure Zahl 0–5 schnell im Chat/Handzeichen.“ Acknowledge 1–2 Reaktionen.\n- Interaktionstipps: Wenn wenige reagieren, bitten Sie um Emojis (0–5). Wenn Zeit knapp, überspringen Sie 1 Beispielmaßnahme.\n- Technisch: Diagramm kurz einblenden; Chatfenster sichtbar halten.",
      "narration": "Zeit für einen 30‑Sekunden‑Selbsttest... Beantworte für die letzte Woche fünf Ja‑Nein‑Fragen: Unter sieben Stunden Schlaf an drei oder mehr Nächten?... Späte Commits oder On‑Call nach zweiundzwanzig Uhr?... Fixe Meetings, die in einer Zeitzone nach einundzwanzig Uhr liegen?... Koffein nach sechzehn Uhr an mehreren Tagen?... Gereiztheit oder mehr Rework nach späten Merges?... Zähle jetzt deine Ja‑Antworten... Bei zwei oder mehr: Wähle eine Sofortmaßnahme – No‑Late‑Merge, rotierende Meetingzeiten oder Post‑Call‑Rest... Und teile deine Zahl kurz im Chat.",
      "duration": 0.5,
      "transition": "fade",
      "componentPath": "./components/slides/Slide_s6.tsx",
      "audioPath": "/audio/slide-s6.mp3"
    },
    {
      "id": "s7",
      "content": {
        "type": "markdown",
        "title": "Schlank messen statt überwachen: einfache Metriken und Checks",
        "markdown": "**Prinzipien**: schlank, freiwillig, anonymisiert; keine Schlaf‑Überwachung, nur Arbeitsprozess‑Signale\n**Einfache Metriken (wöchentlich)**: % Commits 19–07 Uhr; Bugs/Hotfixes nach nächtlichen Changes; Merges außerhalb Kernzeit; Nutzung von Post‑Call‑Rest\n**Alltagstaugliche Checks**: KSS‑Selbstcheck (≥7 = Risiko) vor kritischen Tasks; \"Two fresh eyes\" für riskante PRs; Cutoff 18–19 Uhr + Sunrise‑Merges; Fatigue‑Check im Incident‑Template\n**Nutzung**: Trends statt Namen in Retros; kleine Experimente → Policies; Ziel: weniger Müdigkeitsfehler, bessere Code‑Qualität\n\n```bash\n# .git/hooks/pre-commit (ausführbar machen)\n#!/usr/bin/env bash\nhour=$(date +%H)\nif [ \"$hour\" -ge 19 ] || [ \"$hour\" -lt 7 ]; then\n  echo \"Es ist $hour Uhr. Spätcommit erkannt.\"\n  read -r -p \"Commit trotzdem? [y/N] \" ans\n  if [[ ! \"$ans\" =~ ^[Yy]$ ]]; then\n    echo \"Abgebrochen. Erstelle Draft-PR oder warte bis Morgen.\"\n    exit 1\n  fi\nfi\n```\n\n```python\n# late_commits.py – schlanke Teammetrik\nimport subprocess, datetime\nfrom collections import Counter\nlog = subprocess.check_output([\n    'git','log','--since=14.days','--pretty=format:%ct|%s'\n], text=True).splitlines()\nif not log:\n    raise SystemExit('Keine Commits in den letzten 14 Tagen')\nlate, total, night_hotfix = 0, 0, 0\nfor line in log:\n    ts_s, msg = line.split('|', 1)\n    hour = datetime.datetime.fromtimestamp(int(ts_s)).hour\n    total += 1\n    is_late = hour >= 19 or hour < 7\n    late += is_late\n    if is_late and any(k in msg.lower() for k in ('hotfix','rollback')):\n        night_hotfix += 1\nprint(f\"Spät‑Commit‑Anteil: {late/total:.0%} (n={late}/{total})\")\nprint(f\"Nächtliche Hotfixes/Rollbacks: {night_hotfix}\")\n```\n\n```mermaid\nflowchart LR\nA[\"Minimale Signale\"] --> B[\"Wöchentliche Retro\"]\nB --> C[\"Kleines Experiment\"]\nC --> D[\"Policy oder zurückrollen\"]\nD --> A\n```"
      },
      "speakerNotes": "- Spend 5s: Transition — wir messen Lean‑Signale statt Menschen zu überwachen\n- Spend 15s: Prinzipien und die 4 Kernmetriken kurz nennen; betone Bezug zur Evidenz: späte Arbeit korreliert mit Fehlern\n- Spend 15s: Erkläre Checks: KSS‑Selbstcheck, Two‑fresh‑eyes, Cutoff + Sunrise‑Merges, Fatigue‑Frage im Incident\n- Show demo 15s: Zeige kurz den pre‑commit Hook und den Python‑Report; erwähne: freiwillig, lokal, keine personenbezogenen Dashboards\n- Spend 5s: Diagramm — Loop von Signal → Retro → Experiment → Policy\n- Ask audience 5s: Wer misst bereits Spät‑Commits oder hat Cutoffs?\n- Technical reminder: Zoom auf Codeblöcke; nicht ins Terminal wechseln; Zeit im Blick behalten\n- Close: 5s — Fokus auf Trends, nicht Namen; Ziel ist Qualität und Gesundheit",
      "narration": "Statt Menschen zu überwachen, messen wir schlanke, aussagekräftige Signale, die direkt mit Qualität und Müdigkeitsrisiko zusammenhängen... Vier Dinge genügen: den Anteil an Commits zwischen neunzehn und sieben Uhr, Bugs oder Hotfixes nach nächtlichen Changes, Merges außerhalb der Kernzeit und ob nach Nacht‑Einsätzen wirklich Post‑Call‑Rest genutzt wird... Diese Metriken sind leicht zu erheben und korrespondieren mit dem, was die Forschung zeigt: Späte Arbeit erhöht die Fehlerwahrscheinlichkeit... Dazu kommen einfache Checks im Alltag: ein kurzer KSS‑Selbstcheck vor kritischen Tasks – bei sieben oder höher lieber Pairing oder verschieben –, die Regel Two fresh eyes für riskante Pull Requests, ein Cutoff gegen Abend und Sunrise‑Merges am nächsten Morgen sowie eine Fatigue‑Frage im Incident‑Template... Technisch reicht oft ein lokaler, freiwilliger pre‑commit Hook, der spät abends warnt, und ein kleines Skript, das den Spät‑Commit‑Anteil der letzten zwei Wochen aus dem Git‑Log berechnet... Wichtig: Wir betrachten Trends, nicht Namen... Der Loop ist simpel: minimale Signale, wöchentliche Retro, kleines Experiment, und nur wenn es wirkt, wird eine Policy daraus.",
      "duration": 1,
      "transition": "fade",
      "componentPath": "./components/slides/Slide_s7.tsx",
      "audioPath": "/audio/slide-s7.mp3"
    },
    {
      "id": "s8",
      "content": {
        "type": "markdown",
        "title": "Handlungsplan für nachhaltige Produktivität: individuelle, Team‑ und Policy‑Schritte",
        "markdown": "- Individuell: 7–9 h Schlaf priorisieren; Abendlicht dimmen/Night-Shift; Koffein ≥6–8 h vor dem Schlaf stoppen; Powernap 10–20 min; bei Insomnie/Tagesschläfrigkeit medizinisch abklären (CBT‑I, STOP‑Bang)\n- Team: Sustainable Pace; Merge/Deploy‑Cutoff am Abend; „Two fresh eyes“ für heikle PRs; faire On‑Call‑Rotation mit Post‑Call‑Rest; rotierende Zeitzonen‑Meetings & asynchrone Updates\n- Policy & Kultur: Right to Disconnect; Fatigue Risk Management (Schulung, Protokolle, blameless Reporting); schlaffreundliche Benefits (CBT‑I, Lichttherapie, Ruheräume); Datenethik statt Schlaf‑Überwachung\n- Monitoring: Spät‑Commit/Deploy‑Metriken, Bug‑Rückläufe nach Nacht‑Changes; Retros mit Fatigue‑Lens; kurze Schläfrigkeitsskala (z. B. KSS) vor kritischen Aufgaben\n- Nächste Schritte (14 Tage): Meeting‑Rotation starten, „Sunrise‑Merges“ testen, Nap‑Pilot; Erfolg messen: weniger nächtliche Changes, kürzere PR‑Durchlaufzeit, bessere subjektive Wachheit\n\n```bash\n# .git/hooks/pre-push (ausführbar machen)\nHOUR=$(date +%H)\nif [ \"$HOUR\" -ge 19 ] || [ \"$HOUR\" -lt 7 ]; then\n  echo \"Warnung: Später Push erkannt. 'Sunrise-Merges' bevorzugen. Override mit PUSH_ANYWAY=1.\"\n  if [ \"$PUSH_ANYWAY\" != \"1\" ]; then exit 1; fi\nfi\n```\n\n```mermaid\nflowchart LR\nA[\"Individuell\"] --> B[\"Team\"]\nB --> C[\"Policy & Organisation\"]\nC --> D[\"Messung & Feedback\"]\nD --> A\n```"
      },
      "speakerNotes": "- 0:00–0:05 Pause kurz, dann den Plan als Brücke zur Umsetzung ankündigen\n- 0:05–0:20 Punkt 1 knapp: individuelle Hebel betonen; Verweis auf CBT-I/Apnoe-Screening\n- 0:20–0:35 Punkt 2–3: Team-Regeln und Policy-Ansätze nennen; „No late merges“, Post-Call-Rest hervorheben\n- 0:35–0:45 Monitoring: 2–3 konkrete Metriken nennen; betonen, dass es leichtgewichtig bleibt\n- 0:45–0:55 Auf den Hook verweisen: kurz zeigen, dass Technik Kultur stützen kann (keine Live-Demo)\n- 0:55–1:00 Abschluss: Mermaid-Kreislauf zeigen; Publikum bittet, sich heute für 1 Pilot-Schritt zu committen\n- Interaktion: „Wer testet in den nächsten 2 Wochen Sunrise-Merges?“ Handzeichen erfragen\n- Technischer Hinweis: Folie mit Code sichtbar, nicht scrollen; Laserpointer für Kreislauf nutzen\n- Zeitwächter: Bei 0:50 zum Abschlusssatz wechseln",
      "narration": "Zum Abschluss fasse ich unseren Handlungsplan für nachhaltige Produktivität zusammen... Erstens, individuell: Priorisieren Sie sieben bis neun Stunden Schlaf, dämpfen Sie Abendlicht, stoppen Sie Koffein rechtzeitig, nutzen Sie kurze Powernaps und klären Sie anhaltende Schlafprobleme medizinisch, zum Beispiel mit CBT‑I oder einem Schlafapnoe‑Screening... Zweitens, im Team: Arbeiten Sie mit nachhaltigem Tempo, setzen Sie einen abendlichen Merge- und Deploy‑Cutoff, lassen Sie heikle Pull Requests von zwei ausgeruhten Personen prüfen und sichern Sie faire On‑Call‑Rotationen mit Post‑Call‑Rest... Drittens, auf Policy‑Ebene: Recht auf Abschalten, Fatigue‑Risk‑Management und schlaffreundliche Benefits – ohne Mikromanagement Ihrer Gesundheit... Messen Sie schlank mit einfachen Indikatoren wie späten Commits, Bug‑Rückläufen und einer kurzen Schläfrigkeitsskala vor kritischen Aufgaben... Für den Start schlage ich ein 14‑Tage‑Experiment vor: Meeting‑Rotation, Sunrise‑Merges und ein Nap‑Pilot... Der kleine Code‑Hook auf der Folie bremst späte Pushes und unterstützt die Regel technisch... Der Kreislauf zeigt: Individuum, Team, Organisation und Messung greifen ineinander... Wählen Sie heute einen Schritt und legen Sie los.",
      "duration": 1,
      "transition": "fade",
      "voice": {
        "emotion": "friendly",
        "pace": "slow"
      },
      "componentPath": "./components/slides/Slide_s8.tsx",
      "audioPath": "/audio/slide-s8.mp3"
    }
  ],
  "transitions": {
    "default": "fade",
    "duration": 500
  }
}
